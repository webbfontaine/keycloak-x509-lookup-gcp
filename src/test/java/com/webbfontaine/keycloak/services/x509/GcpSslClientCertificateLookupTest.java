/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.webbfontaine.keycloak.services.x509;

import jakarta.ws.rs.core.HttpHeaders;
import jakarta.ws.rs.core.MultivaluedHashMap;
import jakarta.ws.rs.core.MultivaluedMap;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.keycloak.common.crypto.CryptoIntegration;
import org.keycloak.http.HttpRequest;
import org.keycloak.services.x509.X509ClientCertificateLookup;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.security.GeneralSecurityException;
import java.security.cert.*;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class GcpSslClientCertificateLookupTest {

    private static final String X_SSL_CLIENT_CERT = "x-ssl-client-cert";

    private static final String X_SSL_CERT_CHAIN = "x-ssl-cert-chain";

    private X509ClientCertificateLookup lookup;

    @Mock
    private HttpRequest httpRequest;

    @Mock
    private HttpHeaders httpHeaders;

    @BeforeEach
    public void setUp() {
        CryptoIntegration.init(getClass().getClassLoader());
        lookup = new GcpSslClientCertificateLookup(
                X_SSL_CLIENT_CERT, X_SSL_CERT_CHAIN
        );
    }

    @Test
    void testEmptySslClientCertHeader() throws GeneralSecurityException {
        MultivaluedMap<String, String> headers = new MultivaluedHashMap<>();
        headers.putSingle(X_SSL_CLIENT_CERT, null);
        when(httpHeaders.getRequestHeaders()).thenReturn(headers);
        when(httpRequest.getHttpHeaders()).thenReturn(httpHeaders);

        X509Certificate[] result = lookup.getCertificateChain(httpRequest);

        assertNotNull(result);
        assertEquals(0, result.length, "Expected no certificates to be returned");
    }

    @Test
    void testInvalidX509CertificateInHeader() {
        MultivaluedMap<String, String> headers = new MultivaluedHashMap<>();
        headers.putSingle(X_SSL_CLIENT_CERT, "InvalidCertificateData");
        when(httpHeaders.getRequestHeaders()).thenReturn(headers);
        when(httpRequest.getHttpHeaders()).thenReturn(httpHeaders);

        assertThrows(GeneralSecurityException.class, () -> {
            lookup.getCertificateChain(httpRequest);
        });
    }

    @Test
    public void testGetCertificateChainSingleWithEmptyHeaders() throws Exception {
        MultivaluedMap<String, String> headers = new MultivaluedHashMap<>();
        when(httpHeaders.getRequestHeaders()).thenReturn(headers);
        when(httpRequest.getHttpHeaders()).thenReturn(httpHeaders);

        X509Certificate[] certificateChain = lookup.getCertificateChain(httpRequest);

        assertNotNull(certificateChain);
    }

    @Test
    public void testGetCertificateChainSingleCertificate() throws Exception {
        assertCertificateChain(":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:", 1);
    }

    @Test
    public void testGetCertificateChainSingleCertificateWithoutColon() throws Exception {
        assertCertificateChain("MIIGojCCBYqgAwIBAgITHQAAIzZFOYR5lcxf8QABAAAjNjANBgkqhkiG9w0BAQsFADCBozEZMBcGA1UEBRMQQ1BKLTktOTk5LTk5OTk5OTELMAkGA1UEBhMCQ1IxJDAiBgNVBAoTG0JBTkNPIENFTlRSQUwgREUgQ09TVEEgUklDQTEiMCAGA1UECxMZRElWSVNJT04gU0lTVEVNQVMgREUgUEFHTzEvMC0GA1UEAxMmQ0EgU0lOUEUgLSBQRVJTT05BIEZJU0lDQSAtIFBSVUVCQVMgdjIwHhcNMjMxMTAzMDA1ODM0WhcNMjcxMTAyMDA1ODM0WjCBtDEZMBcGA1UEBRMQTlVQLTE5OTg4Nzc1NTQ0MzEYMBYGA1UEBBMPQ0FTQ0FOVEUgUFJVRUJBMRAwDgYDVQQqEwdOQVJDSVNPMQswCQYDVQQGEwJDUjEXMBUGA1UEChMOUEVSU09OQSBGSVNJQ0ExEzARBgNVBAsTCkVYVFJBTkpFUk8xMDAuBgNVBAMTJ05BUkNJU08gQ0FTQ0FOVEUgUFJVRUJBIChBVVRFTlRJQ0FDSU9OKTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMVxAhX/EqEoeG3liVucXky51jg8K4NA9P53aegSb1AwQct6FdbHnARiCDbRA45l0XiqkDUd280/FqVRYKX064sFN0WCk8xhf6Bg1oPS3W6rhYJvzWIqAjDAwFfNeWMuabFiwv+bv9jEKPm33ivhF9DG/WYULIHLkX+oNJ2RCjh+bzuwP1GA/H37tYUxYJA70vRKmGLOVZ7wjPgZ4KaByZ7fLqnZQKkDJDVAbfYDM9jPjk/QGmJrIa/qoC/szFG+gsr+MRE/0EUDEvbT6aX7QFc93AcP9P+qf6xI/QkMUd+P9Yktj2nNHzIzJq2Q4rZylxHSIev5qpQjFVnTIYLWFx0CAwEAAaOCArowggK2MIGUBgkqhkiG9w0BCQ8EgYYwgYMwDgYIKoZIhvcNAwICAgCAMA4GCCqGSIb3DQMEAgIAgDAHBgUrDgMCBzAKBggqhkiG9w0DBzALBglghkgBZQMEASowCwYJYIZIAWUDBAEtMAsGCWCGSAFlAwQBFjALBglghkgBZQMEARkwCwYJYIZIAWUDBAECMAsGCWCGSAFlAwQBBTAdBgNVHQ4EFgQU3CdeMSsudxXaW87JBxV8JPI7zvAwDgYDVR0PAQH/BAQDAgWgMB8GA1UdIwQYMBaAFLJhS+mq81vykhrou+pZfmUqnmphMHYGA1UdHwRvMG0wa6BpoGeGZWh0dHA6Ly9mZGlwcnVlYmFzLmRtei1wLmxvY2FsL3JlcG9zaXRvcmlvL0NBJTIwU0lOUEUlMjAtJTIwUEVSU09OQSUyMEZJU0lDQSUyMC0lMjBQUlVFQkFTJTIwdjIoMSkuY3JsMIGzBggrBgEFBQcBAQSBpjCBozBxBggrBgEFBQcwAoZlaHR0cDovL2ZkaXBydWViYXMuZG16LXAubG9jYWwvcmVwb3NpdG9yaW8vQ0ElMjBTSU5QRSUyMC0lMjBQRVJTT05BJTIwRklTSUNBJTIwLSUyMFBSVUVCQVMlMjB2MigxKS5jcnQwLgYIKwYBBQUHMAGGImh0dHA6Ly9mZGlwcnVlYmFzLmRtei1wLmxvY2FsL29jc3AwPAYJKwYBBAGCNxUHBC8wLQYlKwYBBAGCNxUIs8RmgsThT4HlkyCEy4MYhNedawqEmP1agaiXbgIBZgIBADAfBgNVHSUEGDAWBggrBgEFBQcDAgYKKwYBBAGCNxQCAjApBgkrBgEEAYI3FQoEHDAaMAoGCCsGAQUFBwMCMAwGCisGAQQBgjcUAgIwFQYDVR0gBA4wDDAKBghggTwBAQEBAzANBgkqhkiG9w0BAQsFAAOCAQEAC+mi6Onv04pRlcJHrRELMCDNf+JNxC39rEN1jIN3hrMFYNZo9SmFELWrkVoRB74SXHmieVFxbdqHFKQJgVtQVvxHb2VLJeum+IGmUcjwA2eYoCsqHH+sWdlTmui5eYCxMmn7UczRs0UV+3XexPRClZHHzhPX3JS9O3GRbLv/lZYhRE6Lgo+EW2YA9vK6qG6mvd2v25n4HBmkgFl3w5qsS+iFrpravjWlRHbIR4j/QbVlSFwWJ5NAoMawDDrc8em8q7Q0HCoJYJFcCrV/rux3RCTFoeEQqJ6WZVgdwENAXl5OcRvxiwKlIwRhcF9l9GRncBBgRuaBwBNsEj2K4JWCLw==", 1);
    }

    @Test
    public void testGetCertificateChain() throws Exception {
        MultivaluedMap<String, String> headers = new MultivaluedHashMap<>();
        headers.putSingle(X_SSL_CLIENT_CERT, ":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:");
        headers.putSingle(X_SSL_CERT_CHAIN, ":MIIMazCCClOgAwIBAgITFgAAAA1jchaPoHBSwQAAAAAADTANBgkqhkiG9w0BAQ0FADB6MRkwFwYDVQQFExBDUEotOS05OTktOTk5OTk5MQswCQYDVQQGEwJDUjEPMA0GA1UEChMGTUlDSVRUMQ0wCwYDVQQLEwREQ0ZEMTAwLgYDVQQDEydDQSBQT0xJVElDQSBQRVJTT05BIEZJU0lDQSAtIFBSVUVCQVMgdjIwHhcNMTkxMTE5MTQzMjE3WhcNMjcxMTE5MTQ0MjE3WjCBozEZMBcGA1UEBRMQQ1BKLTktOTk5LTk5OTk5OTELMAkGA1UEBhMCQ1IxJDAiBgNVBAoTG0JBTkNPIENFTlRSQUwgREUgQ09TVEEgUklDQTEiMCAGA1UECxMZRElWSVNJT04gU0lTVEVNQVMgREUgUEFHTzEvMC0GA1UEAxMmQ0EgU0lOUEUgLSBQRVJTT05BIEZJU0lDQSAtIFBSVUVCQVMgdjIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC4IM5ilLPNIbESlBAQTY3bhj0GrFRKi7U/lain5BHFcZ+0lnCXIBer/wSVQL6RRr+8YbghbgelojQxF3PzwcuoRxzuRvcpAORq9vkLQgyVKyKeVHft2rxaTbWMdoEgkjs4TE4AW6VwXSdfhl+JvVB3fXDrfX9/KEJxt//+dYhMXJGhOtR3zEKxKlQaIJCMpcCAlRiHkNrUMqbRRN9+jCO48hLmMaJRavn+vuam2IUZxNJPU415XLBLKy6ekAkj7aOG1tIvDHfJRcNXOBu5KCATOJ0OcCYom6cgeSGoTFGFrYMW6W6LVWF4/zHcNzpPGCzsMYLaFqpBlrIMBIjWpKjjAgMBAAGjgge+MIIHujASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBT6z3mXJ9R/YKEs3xD36FcxYZ7EMjAdBgNVHQ4EFgQUsmFL6arzW/KSGui76ll+ZSqeamEwggYOBgNVHSAEggYFMIIGATCCASIGB2CBPAEBAQEwggEVMIG0BggrBgEFBQcCAjCBpx6BpABJAG0AcABsAGUAbQBlAG4AdABhACAAbABhACAAUABvAGwAaQB0AGkAYwBhACAAZABlACAAbABhACAAUgBhAGkAegAgAEMAbwBzAHQAYQByAHIAaQBjAGUAbgBzAGUAIABkAGUAIABDAGUAcgB0AGkAZgBpAGMAYQBjAGkAbwBuACAARABpAGcAaQB0AGEAbAAgAC0AIABQAFIAVQBFAEIAQQBTMCoGCCsGAQUFBwIBFh5odHRwOi8vd3d3LmZpcm1hZGlnaXRhbC5nby5jcgAwMAYIKwYBBQUHAgEWJGh0dHA6Ly93d3cubWljaXQuZ28uY3IvZmlybWFkaWdpdGFsADCCAWMGCGCBPAEBAQEBMIIBVTCB9AYIKwYBBQUHAgIwgecegeQASQBtAHAAbABlAG0AZQBuAHQAYQAgAGwAYQAgAFAAbwBsAGkAdABpAGMAYQAgAGQAZQAgAEMAQQAgAEUAbQBpAHMAbwByAGEAIABwAGEAcgBhACAAUABlAHIAcwBvAG4AYQBzACAARgBpAHMAaQBjAGEAcwAgAHAAZQByAHQAZQBuAGUAYwBpAGUAbgB0AGUAIABhACAAbABhACAAUABLAEkAIABOAGEAYwBpAG8AbgBhAGwAIABkAGUAIABDAG8AcwB0AGEAIABSAGkAYwBhACAALQAgAFAAUgBVAEUAQgBBAFMwKgYIKwYBBQUHAgEWHmh0dHA6Ly93d3cuZmlybWFkaWdpdGFsLmdvLmNyADAwBggrBgEFBQcCARYkaHR0cDovL3d3dy5taWNpdC5nby5jci9maXJtYWRpZ2l0YWwAMIIBtgYIYIE8AQEBAQIwggGoMIIBRgYIKwYBBQUHAgIwggE4HoIBNABJAG0AcABsAGUAbQBlAG4AdABhACAAbABhACAAUABvAGwAaQB0AGkAYwBhACAAcABhAHIAYQAgAGMAZQByAHQAaQBmAGkAYwBhAGQAbwAgAGQAZQAgAGYAaQByAG0AYQAgAGQAaQBnAGkAdABhAGwAIABkAGUAIABwAGUAcgBzAG8AbgBhAHMAIABmAGkAcwBpAGMAYQBzACAAKABjAGkAdQBkAGEAZABhAG4AbwAvAHIAZQBzAGkAZABlAG4AdABlACkAIABwAGUAcgB0AGUAbgBlAGMAaQBlAG4AdABlACAAYQAgAGwAYQAgAFAASwBJACAATgBhAGMAaQBvAG4AYQBsACAAZABlACAAQwBvAHMAdABhACAAUgBpAGMAYQAgAC0AIABQAFIAVQBFAEIAQQBTMCoGCCsGAQUFBwIBFh5odHRwOi8vd3d3LmZpcm1hZGlnaXRhbC5nby5jcgAwMAYIKwYBBQUHAgEWJGh0dHA6Ly93d3cubWljaXQuZ28uY3IvZmlybWFkaWdpdGFsADCCAbYGCGCBPAEBAQEDMIIBqDCCAUYGCCsGAQUFBwICMIIBOB6CATQASQBtAHAAbABlAG0AZQBuAHQAYQAgAGwAYQAgAFAAbwBsAGkAdABpAGMAYQAgAHAAYQByAGEAIABjAGUAcgB0AGkAZgBpAGMAYQBkAG8AIABkAGUAIABhAHUAdABlAG4AdABpAGMAYQBjAGkAbwBuACAAZABlACAAcABlAHIAcwBvAG4AYQBzACAAZgBpAHMAaQBjAGEAcwAgACgAYwBpAHUAZABhAGQAYQBuAG8ALwByAGUAcwBpAGQAZQBuAHQAZQApACAAcABlAHIAdABlAG4AZQBjAGkAZQBuAHQAZQAgAGEAIABsAGEAIABQAEsASQAgAE4AYQBjAGkAbwBuAGEAbAAgAGQAZQAgAEMAbwBzAHQAYQAgAFIAaQBjAGEAIAAtACAAUABSAFUARQBCAEEAUzAqBggrBgEFBQcCARYeaHR0cDovL3d3dy5maXJtYWRpZ2l0YWwuZ28uY3IAMDAGCCsGAQUFBwIBFiRodHRwOi8vd3d3Lm1pY2l0LmdvLmNyL2Zpcm1hZGlnaXRhbAAwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMBIGA1UdEwEB/wQIMAYBAf8CAQAwHwYDVR0jBBgwFoAUTo6pNZjh6w6/BxvikiZkl9UNXYcwcgYDVR0fBGswaTBnoGWgY4ZhaHR0cDovL2ZkaXBydWViYXMuZG16LXAubG9jYWwvcmVwb3NpdG9yaW8vQ0ElMjBQT0xJVElDQSUyMFBFUlNPTkElMjBGSVNJQ0ElMjAtJTIwUFJVRUJBUyUyMHYyLmNybDB9BggrBgEFBQcBAQRxMG8wbQYIKwYBBQUHMAKGYWh0dHA6Ly9mZGlwcnVlYmFzLmRtei1wLmxvY2FsL3JlcG9zaXRvcmlvL0NBJTIwUE9MSVRJQ0ElMjBQRVJTT05BJTIwRklTSUNBJTIwLSUyMFBSVUVCQVMlMjB2Mi5jcnQwDQYJKoZIhvcNAQENBQADggIBAH3Ca2dVpTrhyFD7a1otHvdtw/zc5xdSdJlq42Em2Y5q3gtkxWcTlQPIe9uvV34WprGWoRralmj1z1NLiWu3VJTuZcfed4uKgt+ztcvn7HSM9CmRiXLZ318DhEP8kRLUSiWBa5jo9HIMOmvlpDfylVCk8MAeaW5PXShxyMR2mbQvrzcaZQykoFVvH/SiXqozXFiCARUDtQPFGhT3ML9NKvR6ceDT551ebe35rDiN6R7RhO7A581IbJA/pP2FwjUqtr38VPe22PzN4Zm7dCHPIi6Xhap7OLOSPXNOyatV8Ht4BwZqf4D2AoUwmHFdV7ycaMYTyMIg+pyP5vQpbAKP9A7d+UjVcOn33jfpsgcVtAXr2NUn5B9+Hqd04U0Fmv06gY+avpmFj4lULdJDEgMY76diNNle/ToFGh/FzAj/I013Wi68FDSZWVTNPz5HjvNe7tQinZi8RagDR4Hu1VBytOLNA8fNvgLi0PxZMF27OBqQyPtZ0bQAv2/0EeFF8V4TNL2Cta5S3XobNFPwBL7UsDXB83E9ZV/YDbAmtDq0qtSj+OrOTM51QEM8eVDHQukl3mawcMMkrsG8Lljr13LJDc85HU2nS5Msv4CZdS038jfEltyRtGobKEdg4Dgi2b5UZBErqisRZAxLDhoq6kh10QGjFvIaeRz1I6F/xUg9us1K:,:MIIMKTCCChGgAwIBAgITSAAAAArvNnLXa5nXwAAAAAAACjANBgkqhkiG9w0BAQ0FADBwMRkwFwYDVQQFExBDUEotOS05OTktOTk5OTk5MQ0wCwYDVQQLEwREQ0ZEMQ8wDQYDVQQKEwZNSUNJVFQxCzAJBgNVBAYTAkNSMSYwJAYDVQQDEx1DQSBSQUlaIE5BQ0lPTkFMIC0gUFJVRUJBUyB2MjAeFw0xNTAzMTAyMjM3MDdaFw0zMTAzMTAyMjQ3MDdaMHoxGTAXBgNVBAUTEENQSi05LTk5OS05OTk5OTkxCzAJBgNVBAYTAkNSMQ8wDQYDVQQKEwZNSUNJVFQxDTALBgNVBAsTBERDRkQxMDAuBgNVBAMTJ0NBIFBPTElUSUNBIFBFUlNPTkEgRklTSUNBIC0gUFJVRUJBUyB2MjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALkdquN68mB0V2xCBva1LdrCM3OtXbDqcZEsikFo4egC7/qX3HFw5Yh8veNQ70bFHmr/9sNj1UeSgYVnKIw5CATicGwrFiYIpdD0SfLF+aGT1pPMAXyYcBdcKwdkk412Fqs46ETe4DHb72TGU2g8ZbutQV4tx6V/tUS/CSWqQkcMyhDuTJ/VaH+9AA8FGvDTC0WnPCzKdD1SgR96A9+aN2/N/EJWNFG/iVAv6IiuWTTaRvhn3P31ZyY2ljPhF1aMGOyoQfr6aWPh4+SOz9cWf8VLDgMLAW6IixneaApVotcQz1odk2EweDhQ1IwoAr76FpFWfwL5zIj+5Gr+IZ2xJQTfwDaLXmb2ZdPYrfSjV63/7OBsCqfSDjdFhZ3/4dFqyYCjv7rmv1yPCP2zFebeC+Ez/N8sxZRJbtx+V0gjmCxo6kOx5JfBdbVHuMBkDG9RMl1W7b4g0D8aUFG6pt10+0RqcFRt9GkxyWLZxcZtM1X4i7cbnb84jzK/pbNR4casy4TlGsd8PjqhW3qnN4WLhAY3A3vpXGEdjrXNxyb4+vDfoYZL1kRc/sS7TkBfZdPR6TEPoQGpLw8L5IMrtSPxFDE0bL/yafxfkdO+QIsI+Ybx1J45/+EBdKQYcnXErKOBYfrgVkAe7qj3CyC8kUlMIbHV/WZrx9lzUBWB4USEf9ZJAgMBAAGjggawMIIGrDAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4EFgQUTo6pNZjh6w6/BxvikiZkl9UNXYcwggVCBgNVHSAEggU5MIIFNTCCAVAGB2CBPAEBAQEwggFDMIHiBggrBgEFBQcCAjCB1R6B0gBJAG0AcABsAGUAbQBlAG4AdABhACAAbABhACAAUABvAGwAaQB0AGkAYwBhACAAZABlACAAQwBlAHIAdABpAGYAaQBjAGEAZABvAHMAIABwAGEAcgBhACAAbABhACAASgBlAHIAYQByAHEAdQBpAGEAIABOAGEAYwBpAG8AbgBhAGwAIABkAGUAIABDAGUAcgB0AGkAZgBpAGMAYQBkAG8AcgBlAHMAIABSAGUAZwBpAHMAdAByAGEAZABvAHMAIAAtACAAUABSAFUARQBCAEEAUzAqBggrBgEFBQcCARYeaHR0cDovL3d3dy5maXJtYWRpZ2l0YWwuZ28uY3IAMDAGCCsGAQUFBwIBFiRodHRwOi8vd3d3Lm1pY2l0LmdvLmNyL2Zpcm1hZGlnaXRhbAAwggFjBghggTwBAQEBATCCAVUwgfQGCCsGAQUFBwICMIHnHoHkAEkAbQBwAGwAZQBtAGUAbgB0AGEAIABsAGEAIABwAG8AbABpAHQAaQBjAGEAIABkAGUAIABDAEEAIABFAG0AaQBzAG8AcgBhACAAcABhAHIAYQAgAFAAZQByAHMAbwBuAGEAcwAgAEYAaQBzAGkAYwBhAHMAIABwAGUAcgB0AGUAbgBlAGMAaQBlAG4AdABlACAAYQAgAGwAYQAgAFAASwBJACAATgBhAGMAaQBvAG4AYQBsACAAZABlACAAQwBvAHMAdABhACAAUgBpAGMAYQAgAC0AIABQAFIAVQBFAEIAQQBTMCoGCCsGAQUFBwIBFh5odHRwOi8vd3d3LmZpcm1hZGlnaXRhbC5nby5jcgAwMAYIKwYBBQUHAgEWJGh0dHA6Ly93d3cubWljaXQuZ28uY3IvZmlybWFkaWdpdGFsADCCATkGCGCBPAEBAQECMIIBKzCBygYIKwYBBQUHAgIwgb0egboASQBtAHAAbABlAG0AZQBuAHQAYQAgAGwAYQAgAHAAbwBsAGkAdABpAGMAYQAgAHAAYQByAGEAIABmAGkAcgBtAGEAIABkAGkAZwBpAHQAYQBsACAAZABlACAAcABlAHIAcwBvAG4AYQBzACAAZgBpAHMAaQBjAGEAcwAgACgAYwBpAHUAZABhAGQAYQBuAG8ALwByAGUAcwBpAGQAZQBuAHQAZQApACAALQAgAFAAUgBVAEUAQgBBAFMwKgYIKwYBBQUHAgEWHmh0dHA6Ly93d3cuZmlybWFkaWdpdGFsLmdvLmNyADAwBggrBgEFBQcCARYkaHR0cDovL3d3dy5taWNpdC5nby5jci9maXJtYWRpZ2l0YWwAMIIBOQYIYIE8AQEBAQMwggErMIHKBggrBgEFBQcCAjCBvR6BugBJAG0AcABsAGUAbQBlAG4AdABhACAAbABhACAAcABvAGwAaQB0AGkAYwBhACAAcABhAHIAYQAgAGEAdQB0AGUAbgB0AGkAYwBhAGMAaQBvAG4AIABkAGUAIABwAGUAcgBzAG8AbgBhAHMAIABmAGkAcwBpAGMAYQBzACAAKABjAGkAdQBkAGEAZABhAG4AbwAvAHIAZQBzAGkAZABlAG4AdABlACkAIAAtACAAUABSAFUARQBCAEEAUzAqBggrBgEFBQcCARYeaHR0cDovL3d3dy5maXJtYWRpZ2l0YWwuZ28uY3IAMDAGCCsGAQUFBwIBFiRodHRwOi8vd3d3Lm1pY2l0LmdvLmNyL2Zpcm1hZGlnaXRhbAAwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUIj729Csiw7cs+JYF2mK1Og3XVC4wZgYDVR0fBF8wXTBboFmgV4ZVaHR0cDovL2ZkaXBydWViYXMuZG16LXAubG9jYWwvcmVwb3NpdG9yaW8vQ0ElMjBSQUlaJTIwTkFDSU9OQUwlMjAtJTIwUFJVRUJBUyUyMHYyLmNybDBxBggrBgEFBQcBAQRlMGMwYQYIKwYBBQUHMAKGVWh0dHA6Ly9mZGlwcnVlYmFzLmRtei1wLmxvY2FsL3JlcG9zaXRvcmlvL0NBJTIwUkFJWiUyME5BQ0lPTkFMJTIwLSUyMFBSVUVCQVMlMjB2Mi5jcnQwDQYJKoZIhvcNAQENBQADggIBAENOTfbIQuDaCwIVq4fOEYuzCZS0n2AWn+Oo189XCiHQObqWUq8Ep+25QmSRIO0Vx7+IZwfovOQ+0yCcU/JCqUnupdnFdYWYhSSXaeW6QwHZpvP/JpQ70RRDLWPX9D3AB44/8s/8R7EoIjCt+RCYlqStdExIZmR+2MpTDab3K8+QpSOYToz1UnDMR+7xCS2JWGeg96Lpg1GhN7h8BHxqPCcytkYHXRORixSwme8lpGisCV3TR65p/y7Jz9XqUCfBkrgAb3MSCfRH2o9dvyo+bafza2jKUjnajZIEOcBu64IwXJW/884G+C4r6KjIjrLnOCoCrV46rix1ilp/G61oLkmVSUPeuDTiyhPmnbJvWJFVtajM7SZCPDwcWrbQFUbBFEJBDvEaJspmNnK1+IuvCrQbl+vHRjq/+cGXP9oyo9/uMkM6mRAqiGucmMQoCIge8sYo0fJk6dCpWiHsNMuEVjtm3cvDC/702emZUduIXiL0yaH5HKswDyssE5I727R1DWZOZmO/LYCpQSHBwN2QchqDW5tAFzeP46UuCwR7OCfgwdT1DDu0VixerIitsqwHCmGod8KCGA/E8X2LUBXJQ/ty+Zbn8s9RUq+4uGIhe1s5hZD4T8lisQb1iP/gwwgC5CQaEo1FqNJt+4PjMza5BLm+Yjq9RQ06sKty6r1QojuX:,:MIIFuzCCA6OgAwIBAgIQHD8jbpAfUolD53+3CjaAozANBgkqhkiG9w0BAQ0FADBwMRkwFwYDVQQFExBDUEotOS05OTktOTk5OTk5MQ0wCwYDVQQLEwREQ0ZEMQ8wDQYDVQQKEwZNSUNJVFQxCzAJBgNVBAYTAkNSMSYwJAYDVQQDEx1DQSBSQUlaIE5BQ0lPTkFMIC0gUFJVRUJBUyB2MjAeFw0xNDA4MTMyMjI5MTNaFw0zOTA4MTMyMjM5MTBaMHAxGTAXBgNVBAUTEENQSi05LTk5OS05OTk5OTkxDTALBgNVBAsTBERDRkQxDzANBgNVBAoTBk1JQ0lUVDELMAkGA1UEBhMCQ1IxJjAkBgNVBAMTHUNBIFJBSVogTkFDSU9OQUwgLSBQUlVFQkFTIHYyMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAtp5xZv33TNoU99haR2vtIMkKjrhwcNTuefewGawHSLT2EO7FCUB0CC/9YsDSXU8zKPQYDkIcQ6LDVUI4z6i7y7eVMzXr5PSqBDQY2Wg5/LMWTCr7hP5NTdZWRvPS91IIDED/ogyOYSwhCzwxbtpZmmVbstmw8ShNZiw9UpcZVjXesa3KTSTLg0/Lg4+8yX+we4ndFNLIFHoh4mnXKOshGUa6bi7lmkdgPZTQZRtdLZG60m/HHOX0RAhggzv04FgegDyi/RzXGz/6wXxx1e3fThcleqqF7TEJo7uzE/1iAP0QWwM63f8d/5R7URDXohrW5Kb4MvSAsisYA3jsXx6K6k9M7BduAt9PBIdusFw8c4cpIALetNXyD/iXyDN0ad3gHge0gfkmDBhdbNHjmiGGCxEKPDQ6Il0wToOPMPYZnlzw5psLmyHffvkQ8fJtxMEjfdLs/MiF60sWf9qZJWHMzsdIKL9C6BB27HcVJtobq4PUjq2k0VHPbPPQF5nyOa2pwTnD/aVT8/0F8TOmcNPFT9cWUHG4cVU0CCC9B8p1eoE3uVfVDbe6wuXsnSDMuCeUEokNBN4Mp5GnLVAlybp5vdbXpeByJvbs3Y//iGndgOmSBzhv8oPmE1xGOtiSWZCPb/8Lqoy0TIdFhT65344d8JEWS+EaR5zANlJksuZZaJECAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFCI+9vQrIsO3LPiWBdpitToN11QuMBAGCSsGAQQBgjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQCqFYMksy1NGiz0T1Iq4VGuuJh/R3tA939N0mQSMipzVcpVnImimUVN7CKSPJsFmr8v7++qoeUbHWkawBKnM52sbtRyhse9pJJX3e+0718kCy4/zifkotH1dX3HkZScldki3pC3MzkWdw9TfvDTFJCtRZvOXAVqhjMRo0HLGHrIFsIdhGQqF/5+mWOYJXoz9S7Ry4RwWXhKKmcNw/DAcWb6xk+/QcMnXS5551NPISUpfLoPHxJ+gyHRHbVsdUI1rzSXW6UmI1WBhbw/ARml+Bj+M44w/F1oPtfKm5WjT4NvRXWw3u5HLEbMP6WcFEjffeU77XLh8MLB4HdbprpqG1mVbgLde0/PhqQp76KcSZcvRawKtl9bcfpcA9IaBLdDoWoKAlwvaCN+Fov78nM7Z2z5noaFh47MsmfvQ9+qPh3UXQdJN8jmx0OWH/V/T5uZ4h/4gZiFbhbNa7dokg40/6JZi9JTY7Y+TIwEirSFiYu6Pe8DNY/5pgBo0FFMSqpVnZccQRkBZLZgw+vMdnksv2VF19pYiTJ2c/cmWr5Mt525L2og6h9FOQE100N3K6z4KRm9R9NAO2RVJ22WbiR9uR9PL5TinT0jVyRZaNDPPeyv5Q1rB5DVIJuVPXIo7HwbeoTIgRq37eU8gOG+xuh27AgYeLGTvFmnt6tKhRz7ESrJFQ==:");

        when(httpHeaders.getRequestHeaders()).thenReturn(headers);
        when(httpRequest.getHttpHeaders()).thenReturn(httpHeaders);

        X509Certificate[] certificateChain = lookup.getCertificateChain(httpRequest);


        assertNotNull(certificateChain);
        assertEquals(4, certificateChain.length);
        assertValidateChain(certificateChain);
    }

    private static void assertValidateChain(X509Certificate[] certificateChain) throws Exception {
        CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
        CertPath certPath = certFactory.generateCertPath(Arrays.asList(certificateChain));
        Set<TrustAnchor> trustAnchors = new HashSet<>();

        X509Certificate rootCert = certificateChain[certificateChain.length - 1]; // Assuming the last cert is root
        trustAnchors.add(new TrustAnchor(rootCert, null));

        PKIXParameters pkixParams = new PKIXParameters(trustAnchors);
        pkixParams.setRevocationEnabled(false);

        CertPathValidator certPathValidator = CertPathValidator.getInstance("PKIX", "BC");

        PKIXCertPathValidatorResult result = (PKIXCertPathValidatorResult) certPathValidator.validate(certPath, pkixParams);
        assertNotNull(result);
    }

    private void assertCertificateChain(String v, int expected) throws GeneralSecurityException {
        MultivaluedMap<String, String> headers = new MultivaluedHashMap<>();
        headers.putSingle(X_SSL_CLIENT_CERT, v);
        when(httpHeaders.getRequestHeaders()).thenReturn(headers);
        when(httpRequest.getHttpHeaders()).thenReturn(httpHeaders);


        X509Certificate[] certificateChain = lookup.getCertificateChain(httpRequest);

        assertNotNull(certificateChain);
        assertEquals(expected, certificateChain.length);
    }


    @Test
    public void testGetCertificateChainEmptyHeader() throws Exception {
        assertCertificateChain("", 0);
    }

}